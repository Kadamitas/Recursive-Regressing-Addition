T(n) = T(n-1) + n, Running time O(n^2)
because the function calls itself and adds the current iteration of n

Iterative Method
T(n) = T(n-1) + n 
T(n) = n + (n-1) + T(n-2)
T(n) = (n-1) + (n-2) + T(n-3) 
T(n) = n + n-1 + n-2 + ... + 2 + T(1)
T(n) = n(n+1)/2 - 1 + T(1)
T(n) = n^2 + T(1) = Î˜(n^2)

Substitution Method
T(n) = T(n-1) +n
Guess T(n) = O(n^2)
Prove T(n) <= cn^2 for some value where c > 1 and where n > n-1 > 0

T(n) <= cm^2         c=arbitrary constant
T(n-1) <= c(n-1)^2
Therefore  T(n-1) + n <= c(n-1)^2 +n
m = {1,..,n-1}
T(n) = T(n-1) + n 
T(m) + n <= c(m)^2 + n
T(n-1) + n <= c(n-1)^2 +n
T(n-1) + n <= c(n^2 -2n + 1) +n
T(n-1) + n <= cn^2 -2cn + c +n
T(n-1) + n <= cn^2 -n(2c-1) + c
T(n-1) + n <= cn^2 -n(2c-1) + c <= cn^2
T(n) <= cn^2

Therefore this is true and the running time must be O(n^2)


Tree

            T(n-1) = (n-1)
              n
            n-1
            n-2 
Level  Nodes   Cost    Cost Per Node   Cost Per Level
0       1       n       1                   n
2       1       n-1     1                 
3       1       n-2     1                 
i       1       n-(i-1) 1
